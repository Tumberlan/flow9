
import string;
import lingo/peg;
import lingo/pegcode/driver;

lingoGrammarOp : ref Maybe<[PegOp]> = ref None();

lingoGrammar() {
	onlyOnce(lingoGrammarOp, \ -> {
		compilePegGrammar("#include math4lab7.lingo");
	});
}

Expr ::= ConstInt, Mul, Add, Sub, Deg, Div, Neg, Var;
ConstInt : (value : int);
Add : (left : Expr, right : Expr);
Sub : (left : Expr, right : Expr);
Mul : (left : Expr, right : Expr);
Div : (left : Expr, right : Expr);
Deg : (left : Expr, right : Expr);
Neg : (arg : Expr);
Var : (name : string);

RationalNumber(numerator : int, denominator : int);


isDiv(e : Expr) -> bool {
    switch(e) {
        Div(l, r) : true;
        default : false;
    }
}

extractArgs(e : Expr) -> [Expr] {
    switch(e) {
        Add(l, r) : [l, r];
        Sub(l, r) : [l, r];
        Mul(l, r) : [l, r];
        Div(l, r) : [l, r];
        default : [e];
    }
}

i2rat(num : int) -> RationalNumber {
    RationalNumber(num, 1);
}

rat2s(rat : RationalNumber) -> string {
    if (rat.denominator == 1) {
        i2s(rat.numerator);
    } else if (rat.denominator == 0) {
        "inf";
    } else {
        i2s(rat.numerator) + "/" + i2s(rat.denominator);
    }
}

simplify2(rat: RationalNumber) -> RationalNumber {
    g = iabs(gcd(rat.numerator, rat.denominator));
    if ((rat.numerator < 0 && rat.denominator < 0) || (rat.numerator > 0 && rat.denominator < 0)) {
        RationalNumber(-rat.numerator / g, -rat.denominator / g);
    }
    else {
        RationalNumber(rat.numerator / g, rat.denominator / g);
    }
}

countDeg(originNum: RationalNumber, tmpNum: RationalNumber, degree: int) -> RationalNumber {
    if(degree == 0){
        RationalNumber(1,1);
    }else if(degree == 1){
        tmpNum;
    }else if(degree == -1){
        RationalNumber(tmpNum.denominator, tmpNum.numerator);
    }else if(degree > 1){
        a = RationalNumber(tmpNum.numerator * originNum.numerator, tmpNum.denominator * originNum.denominator);
        countDeg(originNum, a, degree-1);
    }else{
        a = RationalNumber(tmpNum.numerator * originNum.numerator, tmpNum.denominator * originNum.denominator);
        countDeg(originNum, a, degree+1);
    }
}

addRat(l : RationalNumber, r : RationalNumber) -> RationalNumber {
    RationalNumber(l.numerator * r.denominator + r.numerator * l.denominator, l.denominator * r.denominator);
}

subRat(l : RationalNumber, r : RationalNumber) -> RationalNumber {
    RationalNumber(l.numerator * r.denominator - r.numerator * l.denominator, l.denominator * r.denominator);
}

mulRat(l : RationalNumber, r : RationalNumber) -> RationalNumber {
    RationalNumber(l.numerator * r.numerator, l.denominator * r.denominator);
}

divRat(l : RationalNumber, r : RationalNumber) -> RationalNumber {
    RationalNumber(l.numerator * r.denominator, l.denominator * r.numerator);
}

degRat(l : RationalNumber, r : RationalNumber) -> RationalNumber {
    a = countDeg(l, l, r.numerator);
    RationalNumber(a.numerator, a.denominator);
}

negRat(rat : RationalNumber) {
    RationalNumber(-rat.numerator, rat.denominator);
}


s2expr(str : string) -> Expr {
    parsic(lingoGrammar(), str, defaultPegActions);
}

expr2s(e : Expr) -> string {
    switch (e) {
        ConstInt(cInt) : i2s(cInt);
        Mul(l, r) : "(" + expr2s(l) + " * " + expr2s(r) + ")";
        Add(l, r) : "(" + expr2s(l) + " + " + expr2s(r) + ")";
        Sub(l, r) : "(" + expr2s(l) + " - " + expr2s(r) + ")";
        Div(l, r) : "(" + expr2s(l) + " / " + expr2s(r) + ")";
        Deg(l, r) : "(" + expr2s(l) + " ^ " + expr2s(r) + ")";
        Neg(arg) : "(-" + expr2s(arg) + ")";
        Var(x) : x;
    }
}

expr2rat(e: Expr, vars : Tree<string, int>) -> RationalNumber {
    switch (e) {
        ConstInt(cInt) : i2rat(cInt);
        Mul(l, r) : simplify2(mulRat(expr2rat(l, vars), expr2rat(r, vars)));
        Add(l, r) : simplify2(addRat(expr2rat(l, vars), expr2rat(r, vars)));
        Sub(l, r) : simplify2(subRat(expr2rat(l, vars), expr2rat(r, vars)));
        Div(l, r) : simplify2(divRat(expr2rat(l, vars), expr2rat(r, vars)));
        Deg(l, r) : simplify2(degRat(expr2rat(l, vars), expr2rat(r, vars)));
        Neg(arg) : simplify2(negRat(expr2rat(arg, vars)));
        Var(name) : {
            x = switch(lookupTree(vars, name)) {
                None() : i2rat(0);
                Some(val) : i2rat(val);
            };
            x;
        }
    }
}

derivation(e : Expr, var : string) -> Expr {
    switch (e) {
        ConstInt(cInt) : ConstInt(0);
        Add(l, r) : Add(derivation(l, var), derivation(r, var));
        Sub(l, r) : Sub(derivation(l, var), derivation(r, var));
        Mul(l, r) : Add(Mul(derivation(l, var), r), Mul(l, derivation(r, var)));
        Div(l, r) : Div(Sub(Mul(derivation(l, var), r), Mul(l, derivation(r, var))), Mul(r, r));
        Deg(l, r) : Deg(derivation(l, var), derivation(r, var));
        Neg(arg) : Neg(derivation(arg, var));
        Var(name) : {
            if (name == var) {
                ConstInt(1);
            }
            else {
                ConstInt(0);
            }
        }
    }
}

simplifyExpr(e : Expr) -> Expr {
    switch (e) {
        Mul(l, r) : {
            if (simplifyExpr(l) == ConstInt(1)) {
                simplifyExpr(r);
            } // 1 * x 
            else if (simplifyExpr(r) == ConstInt(1)) {
                simplifyExpr(l);
            } // x * 1 
            else if (simplifyExpr(l) == ConstInt(0) || (simplifyExpr(r) == ConstInt(0))) {
                ConstInt(0);
            } // 0 * x || x * 0 
            else {
                Mul(simplifyExpr(l), simplifyExpr(r));
            }
        }
        Add (l, r) : {
            if (simplifyExpr(l) == ConstInt(0)) {
                simplifyExpr(r);
            } // 0 + x 
            else if (simplifyExpr(r) == ConstInt(0)) {
                simplifyExpr(l);
            } // x + 0 
            else {
                Add(simplifyExpr(l), simplifyExpr(r));
            }
        }
        Sub(l, r) : {
            if (simplifyExpr(l) == ConstInt(0)) {
                Neg(simplifyExpr(r));
            } // 0 - x 
            else if (simplifyExpr(r) == ConstInt(0)) {
                simplifyExpr(l);
            } // x - 0 
            else if (simplifyExpr(l) == simplifyExpr(r)) {
                ConstInt(0);
            } // x - x 
            else {
                Sub(simplifyExpr(l), simplifyExpr(r));
            }
        }
        Div(l, r) : {
            if (simplifyExpr(l) == ConstInt(0)) {
                ConstInt(0);
            } // 0 / x 
            else if (simplifyExpr(l) == simplifyExpr(r)) {
                ConstInt(1);
            } // x / x 
            else {
                Div(simplifyExpr(l), simplifyExpr(r));
            }
        }
        default : e;
    }
}

expr2simplier(e : Expr) -> Expr {
    switch(e) {
        ConstInt(val) : ConstInt(val);
        Var(name) : Var(name);
        Neg(arg) : Neg(expr2simplier(arg));
        Add(l, r) : {
            newL = expr2simplier(l);
            newR = expr2simplier(r);
            argsL = extractArgs(newL);
            argsR = extractArgs(newR);
            if (isDiv(newL) && isDiv(newR)) { // a/b + c/d
                Div(Add(Mul(argsL[0], argsR[1]), Mul(argsL[1], argsR[0])), Mul(argsL[1], argsR[1]));
            }
            else if (isDiv(newL)) { // a/b + c
                Div(Add(argsL[0], Mul(argsL[1], newR)), argsL[1]);
            }
            else if (isDiv(newR)) { // a + b/c
                Div(Add(Mul(newL, argsR[1]), argsR[0]), argsR[1]);
            }
            else e;
        }
        Sub(l, r) : {
            newL = expr2simplier(l);
            newR = expr2simplier(r);
            argsL = extractArgs(newL);
            argsR = extractArgs(newR);
            if (isDiv(newL) && isDiv(newR)) { // a/b - c/d
                Div(Sub(Mul(argsL[0], argsR[1]), Mul(argsL[1], argsR[0])), Mul(argsL[1], argsR[1]));
            }
            else if (isDiv(newL)) { // a/b - c 
                Div(Sub(argsL[0], Mul(argsL[1], newR)), argsL[1]);
            }
            else if (isDiv(newR)) { // a - b/c 
                Div(Sub(Mul(newL, argsR[1]), argsR[0]), argsR[1]);
            }
            else e;
        }
        Mul(l, r) : {
            newL = expr2simplier(l);
            newR = expr2simplier(r);
            argsL = extractArgs(newL);
            argsR = extractArgs(newR);
            if (isDiv(newL) && isDiv(newR)) { // a/b * c/d 
                Div(Mul(argsL[0], argsR[0]), Mul(argsL[1], argsR[1]));
            }
            else if (isDiv(newL)) { // a/b * c 
                Div(Mul(argsL[0], newR), argsL[1]);
            }
            else if (isDiv(newR)) { // a * b/c 
                Div(Mul(newL, argsR[0]), argsR[1]);
            }
            else e;
        }
        Div(l, r) : {
            newL = expr2simplier(l);
            newR = expr2simplier(r);
            argsL = extractArgs(newL);
            argsR = extractArgs(newR);
            if (isDiv(newL) && isDiv(newR)) { // a/b / c/d 
                Div(Mul(argsL[0], argsR[1]), Mul(argsL[1], argsR[0]));
            }
            else if (isDiv(newL)) { // a/b / c 
                Div(argsL[0], Mul(argsL[1], newR));
            }
            else if (isDiv(newR)) { // a / b/c 
                Div(Mul(newL, argsR[1]), argsR[0]);
            }
            else e;
        }
        Deg(l,r) : {
            newL = expr2simplier(l);
            newR = expr2simplier(r);
            Deg(newL, newR);
        }
    }
}

differentiate(expr: Expr, x: Var)->Expr {
    switch(expr){
        RationalNumber(numerator, denominator) : RationalNumber(0,1);
        Var(name) : {
            if(name == x.name){
                RationalNumber(1,1);
            }else{
                RationalNumber(0,1);
            }
        }
        Mul(l,r) : {
            newL = differentiate(l, x);
            newR = differentiate(r, x);
            expr2simplier(Add(Mul(newL, r), Mul(l, newR)));
        }
        Add(l,r) : {
            newL = differentiate(l, x);
            newR = differentiate(r, x);
            expr2simplier(Add(newL, newR));
        }
        Sub(l,r) : {
            newL = differentiate(l, x);
            newR = differentiate(r, x);
            expr2simplier(Sub(newL, newR));
        }
        Div(l,r) : {
            newL = differentiate(l, x);
            newR = differentiate(r, x);
            expr2simplier(Div(Sub(Mul(newL, r),Mul(l, newR)),Mul(r, r)));
        }
        Deg(l,r) : {
            newR = differentiate(r, x);
            if(newR == RationalNumber(0,1)){
                newL = differentiate(l, x);
                expr2simplier(Mul(Mul(r, Deg(l, Sub(r, RationalNumber(1,1)))),newL));
            }else{
                RationalNumber(0,1);
            }
        }
    }
}

testExpr(expr : Expr, variables : Tree<string, int>) -> void {
    println("---------------------------------");
    println(expr2s(expr));
    println(rat2s(expr2rat(expr, variables)));
}

main() {
    variables = [Pair("x", 6), Pair("y", 5)];
    varTree = setTreeValues(makeTree(), variables);

    expr1 = differentiate(s2expr("(x ^ y)"), Var("x"));

    //testExpr(expr1, varTree);

    quit(0);
}

